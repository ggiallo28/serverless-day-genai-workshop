AWSTemplateFormatVersion: '2010-09-09'
Description: "CloudFormation template for Knowledge Base with Agent Invocation"

Parameters:
  BedrockExecutionRoleArn:
    Type: String
    Description: The ARN of an existing IAM Role that will be used by the Bedrock Agent for execution.

  AgentName:
    Type: String
    Default: booking-agent
    Description: The name of the Bedrock Agent for handling bookings.

  KnowledgeBaseId:
    Type: String
    Description: The ID of the Bedrock Knowledge Base created by the RAG template.

  S3BucketName:
    Type: String
    Description: The name of the S3 bucket for Knowledge Base documents created by the RAG template.
    
  VectorIndexName:
    Type: String
    Description: The name of the vector index used with the Knowledge Base for OpenSearch.

  OpenSearchCollectionArn:
    Type: String
    Description: The ARN of the OpenSearch Serverless collection created by the RAG template.

  CreateKnowledgeBase:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
    Description: Set this parameter to `true` to create the Bedrock Knowledge Base if the OpenSearch index exists.

  UUID:
    Type: String
    Description: A unique identifier to ensure resource name uniqueness.

  FoundationModelId:
    Type: String
    Default: "anthropic.claude-3-sonnet-20240229-v1:0"
    Description: The foundation model ID to be used by the Bedrock Agent for restaurant booking.

Conditions:
  ShouldCreateKnowledgeBase: !Equals
    - !Ref CreateKnowledgeBase
    - true

Resources:
  RestaurantBookingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "restaurant_bookings-${UUID}"
      AttributeDefinitions:
        - AttributeName: booking_id
          AttributeType: S
      KeySchema:
        - AttributeName: booking_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ExecutionRolePolicyAttachment:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AgentName}-policy-${UUID}"
      Roles:
        - !Select
          - 1
          - !Split ["/", !Ref BedrockExecutionRoleArn]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - bedrock:Retrieve
              - bedrock:RetrieveAndGenerate
            Resource: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/${KnowledgeBaseId}"
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:DeleteItem
              - dynamodb:Scan
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/restaurant_bookings-${UUID}"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AgentName}-lambda-${UUID}"
      Runtime: python3.12
      Role: !Ref BedrockExecutionRoleArn
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
           import json
           import uuid
           import boto3
           
           dynamodb = boto3.resource('dynamodb')
           table = dynamodb.Table('${RestaurantBookingTable}')
           
           def get_named_parameter(event, name):
               return next(item for item in event['parameters'] if item['name'] == name)['value']
               
           def get_booking_details(booking_id):
               try:
                   response = table.get_item(Key={'booking_id': booking_id})
                   if 'Item' in response:
                       return response['Item']
                   else:
                       return {'message': f'No booking found with ID {booking_id}'}
               except Exception as e:
                   return {'error': str(e)}
                   
           def create_booking(date, name, hour, num_guests):
               try:
                   booking_id = str(uuid.uuid4())[:8]
                   table.put_item(
                       Item={
                           'booking_id': booking_id,
                           'date': date,
                           'name': name,
                           'hour': hour,
                           'num_guests': num_guests
                       }
                   )
                   return {'booking_id': booking_id}
               except Exception as e:
                   return {'error': str(e)}
 
           def delete_booking(booking_id):
               try:
                   response = table.delete_item(Key={'booking_id': booking_id})
                   if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                       return {'message': f'Booking with ID {booking_id} deleted successfully'}
                   else:
                       return {'message': f'Failed to delete booking with ID {booking_id}'}
               except Exception as e:
                   return {'error': str(e)}
               
           
           def lambda_handler(event, context):
               # get the action group used during the invocation of the lambda function
               actionGroup = event.get('actionGroup', '')
               
               # name of the function that should be invoked
               function = event.get('function', '')
               
               # parameters to invoke function with
               parameters = event.get('parameters', [])
           
               if function == 'get_booking_details':
                   booking_id = get_named_parameter(event, "booking_id")
                   if booking_id:
                       response = str(get_booking_details(booking_id))
                       responseBody = {'TEXT': {'body': json.dumps(response)}}
                   else:
                       responseBody = {'TEXT': {'body': 'Missing booking_id parameter'}}
           
               elif function == 'create_booking':
                   date = get_named_parameter(event, "date")
                   name = get_named_parameter(event, "name")
                   hour = get_named_parameter(event, "hour")
                   num_guests = get_named_parameter(event, "num_guests")
           
                   if date and hour and num_guests:
                       response = str(create_booking(date, name, hour, num_guests))
                       responseBody = {'TEXT': {'body': json.dumps(response)}}
                   else:
                       responseBody = {'TEXT': {'body': 'Missing required parameters'}}
           
               elif function == 'delete_booking':
                   booking_id = get_named_parameter(event, "booking_id")
                   if booking_id:
                       response = str(delete_booking(booking_id))
                       responseBody = {'TEXT': {'body': json.dumps(response)}}
                   else:
                       responseBody = {'TEXT': {'body': 'Missing booking_id parameter'}}
           
               else:
                   responseBody = {'TEXT': {'body': 'Invalid function'}}
           
               action_response = {
                   'actionGroup': actionGroup,
                   'function': function,
                   'functionResponse': {
                       'responseBody': responseBody
                   }
               }
           
               function_response = {'response': action_response, 'messageVersion': event['messageVersion']}
               print("Response: {}".format(function_response))
           
               return function_response
      Timeout: 60

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com

  CloudWatchAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AgentName}-cloudwatch-policy-${UUID}"
      Roles:
        - !Select
          - 1
          - !Split ["/", !Ref BedrockExecutionRoleArn]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:*
              - cloudwatch:*
            Resource: "*"

  BedrockKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    Condition: ShouldCreateKnowledgeBase
    Properties:
      Name: !Sub kb-${AgentName}-${UUID}
      Description: Knowledge Base for Q&A Application using Bedrock
      RoleArn: !Ref BedrockExecutionRoleArn
      KnowledgeBaseConfiguration:
        Type: "VECTOR"
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v2:0"
          EmbeddingModelConfiguration: 
            BedrockEmbeddingModelConfiguration: 
              Dimensions: 256
      StorageConfiguration:
        Type: "OPENSEARCH_SERVERLESS"
        OpensearchServerlessConfiguration:
          CollectionArn: !Ref OpenSearchCollectionArn
          VectorIndexName: !Ref VectorIndexName
          FieldMapping:
            VectorField: vector
            TextField: AMAZON_BEDROCK_TEXT_CHUNK
            MetadataField: AMAZON_BEDROCK_METADATA

  BedrockDataSource:
    Type: AWS::Bedrock::DataSource
    Condition: ShouldCreateKnowledgeBase
    Properties:
      Name: !Sub kb-data-${AgentName}-${UUID}
      Description: Data Source for Bedrock Q&A Application
      KnowledgeBaseId: !Ref BedrockKnowledgeBase
      DataSourceConfiguration:
        Type: S3
        S3Configuration:
          BucketArn: !Sub "arn:aws:s3:::${S3BucketName}"
          InclusionPrefixes: 
              - "kb_restaurant"
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: FIXED_SIZE
          FixedSizeChunkingConfiguration:
            MaxTokens: 512
            OverlapPercentage: 20

  BedrockAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AgentName}-${UUID}"
      AgentResourceRoleArn: !Ref BedrockExecutionRoleArn
      FoundationModel: !Ref FoundationModelId
      Instruction: |
        You are a restaurant agent, helping clients retrieve information from their booking,
        create a new booking or delete an existing booking.
      Description: "Agent in charge of restaurants table bookings."
      IdleSessionTTLInSeconds: 600
      AutoPrepare: True
#      KnowledgeBases:
#        - KnowledgeBaseId: !Ref KnowledgeBaseId
#          Description: "Knowledge Base for restaurant bookings."
#          KnowledgeBaseState: ENABLED
#      ActionGroups:
#        - ActionGroupName: "TableBookingActions"
#          Description: "Provides functions for booking-related tasks such as retrieving, creating, or deleting a booking."
#          ActionGroupExecutor:
#            Lambda: !GetAtt LambdaFunction.Arn
#          FunctionSchema:
#            Functions:
#              - Name: "get_booking_details"
#                Description: "Retrieve details of a restaurant booking."
#                Parameters:
#                  booking_id:
#                    Description: "The ID of the booking to retrieve."
#                    Required: true
#                    Type: "string"
#              - Name: "create_booking"
#                Description: "Create a new restaurant booking."
#                Parameters:
#                  date:
#                    Description: "The date of the booking in the format YYYY-MM-DD."
#                    Required: true
#                    Type: "string"
#                  name:
#                    Description: "Name to identify your reservation."
#                    Required: true
#                    Type: "string"
#                  hour:
#                    Description: "The hour of the booking in the format HH:MM."
#                    Required: true
#                    Type: "string"
#                  num_guests:
#                    Description: "The number of guests for the booking."
#                    Required: true
#                    Type: "integer"
#              - Name: "delete_booking"
#                Description: "Delete an existing restaurant booking."
#                Parameters:
#                  booking_id:
#                    Description: "The ID of the booking to delete."
#                    Required: true
#                    Type: "string"

  RestaurantGuardrail:
    Type: AWS::Bedrock::Guardrail
    Properties:
      Name: "restaurant-guardrail-cfn"
      BlockedInputMessaging: "Sorry, this query is not related to restaurant bookings or dining and cannot be processed."
      BlockedOutputsMessaging: "Sorry, the output related to this query cannot be provided."
      Description: "Guardrail for filtering inappropriate or irrelevant content in restaurant-related queries and responses."
      
      ContentPolicyConfig:
        FiltersConfig:
          - Type: "VIOLENCE"
            InputStrength: "HIGH"
            OutputStrength: "HIGH"
          - Type: "PROMPT_ATTACK"
            InputStrength: "HIGH"
            OutputStrength: "NONE"
          - Type: "MISCONDUCT"
            InputStrength: "HIGH"
            OutputStrength: "HIGH"
          - Type: "HATE"
            InputStrength: "HIGH"
            OutputStrength: "HIGH"
          - Type: "SEXUAL"
            InputStrength: "HIGH"
            OutputStrength: "HIGH"
          - Type: "INSULTS"
            InputStrength: "HIGH"
            OutputStrength: "HIGH"
      TopicPolicyConfig:
        TopicsConfig: 
          - Definition: "Any input that is not related to restaurant content, such as general knowledge, historical facts, literature, or math, should be blocked."
            Examples: 
              - "Who wrote Pride and Prejudice? or When did the American Civil War end?"
              - "What is the capital of Japan? Tell me about the history of the Roman Empire."
              - "Solve: What is the square root of 256? or What is 12 times 15?"
              - "Give me investment advice. Define the term Quantum Mechanics. What are the causes of global warming?"
              - "Explain the process of photosynthesis. What is the largest planet in the solar system?"
            Name: "Deny Non-Restaurant Topics"
            Type: DENY
      ContextualGroundingPolicyConfig:
        FiltersConfig: 
          - Threshold: 0.7
            Type: RELEVANCE
          - Threshold: 0.7
            Type: GROUNDING

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "artifact-bucket-${UUID}-${AWS::Region}"
      AccessControl: Private
      
Outputs:
  DynamoDBTableName:
    Value: !Ref RestaurantBookingTable
    Description: The name of the DynamoDB table for managing restaurant bookings.

  ExecutionRoleArn:
    Value: !Ref BedrockExecutionRoleArn
    Description: The ARN of the IAM role used by the Bedrock Agent.

  BedrockKnowledgeBaseId:
    Condition: ShouldCreateKnowledgeBase
    Value: !Ref BedrockKnowledgeBase
    Description: The ID of the Bedrock Knowledge Base.

  BedrockDataSourceId:
    Condition: ShouldCreateKnowledgeBase
    Value: !Ref BedrockDataSource
    Description: The ID of the Bedrock Data Source.

  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn
    Description: The ARN of the Lambda function.
    
  BedrockAgentId:
    Value: !GetAtt BedrockAgent.AgentId
    Description: The IF of the Bedrock Agent.
    
  ArtifactBucketName:
    Value: !Ref ArtifactBucket
    Description: The name of the artifact S3 bucket for storing Lambda and other resources.

  GuardrailId:
    Value: !Ref RestaurantGuardrail
    Description: The id of the Restaurant Guardrail